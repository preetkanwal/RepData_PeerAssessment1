rootNode[[1]]
rootNode[[1]][[1]]
rootNode[[1]][[2]]
xmlSApply(rootNode, xmlValue)
xmlSApply(rootNode[[1]], xmlValue)
xpathSApply(rootNode, /breakfast_menu/food/name, xmlValue)
xpathSApply(rootNode, "/breakfast_menu/food/name", xmlValue)
xpathSApply(rootNode, "/breakfast_menu/food/name[1]", xmlValue)
nnUrl <- "http://espn.go.com/nfl/teams"
nDoc <- htmlTreeParse(nnUrl, useInternalNodes = TRUE)
scores <- xpathSApply(nDoc,"li[@class = 'score']", xmlValue)
scores
scores <- xpathSApply(nDoc,"//li[@class = 'score']", xmlValue)
scores
scores <- xpathSApply(nDoc,"//li[@class = 'team-name']", xmlValue)
scores
nDco
nDoc
scores <- xpathSApply(nDoc,"//li[@class = 'sport-menu']", xmlValue)
scores
scores <- xpathSApply(nDoc,"//li[@class = 'text']", xmlValue)
scores <- xpathSApply(nDoc,"//dt[@class = 'first']", xmlValue)
scores
library("jsonlite", lib.loc="~/R/win-library/3.1")
jsonData <- fromJSON("https://api.github.com/users/preetkanwal/repos")
names(jsonData)
names(jsonData["owner"])
names(jsonData$owner)
names(jsonData$owner$login)
iris
fromJSON(jsonData)
jsonData
set.seed(13435)
data.frame("var1" = sample(1:5), "var2" = sample(6:10), "var3" = sample(11:15))
X<-data.frame("var1" = sample(1:5), "var2" = sample(6:10), "var3" = sample(11:15))
X<-X[sample(1:5),]
X
set.seed(13435)
X<-data.frame("var1" = sample(1:5), "var2" = sample(6:10), "var3" = sample(11:15))
x
X
X<-X[sample(1:5)]
X<-X[sample(1:5),]
X
swirl()
library(swirl)
switch()
swirl()
rm("mydf")
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
play()
head(filter(cran, package == "A3"))
(filter(cran, package == "A3"))
(filter(cran, package == "A3"))$size
sum((filter(cran, package == "A3"))$size)
length((filter(cran, package == "A3"))$size)
nxt()
play()
summarize(by_package, unique = n_distinct(ip_id))
summarize(by_package, unique = n_distinct(ip_id), count = n())
nxt()
submit()
pack_sum
quantile(pack_sum$count, probs = .99)
filter(pack_sum, count > 679)
top_countsfilter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_count, 20)
head(top_counts, 20)
arrange(top_counts, desc(count))
quantile(pack_sum$unique,  probs = 0.99)
filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(unique))
quantile(pack_sum$countries, prob = .99)
submit()
submit()
submit()
submit
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, - grade)
students2
res <- gather(students2, sex_class,count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, col = sex_class, into = c("sex", "class"))
submit()
student3
students3
submit()
?spread
submit()
extract_numeric("class5")
submit()
?mutate
?mutate
submit()
reset()
extract_numeric(class)
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class = extract_numeric(class))
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = extract_numeric("class")) %>%
print
student4
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
rbind_list(passed, failed)
sat
sat
?select
select(sat,-contains("total"))
q<-select(sat,-contains("total"))
gather(q,part_sex, count, -score_range)
?separate
separate(q,part_sex, into = c("part", "sex"))
q1<-gather(q,part_sex, count, -score_range)
separate(q1,part_sex, into = c("part", "sex"))
submit()
submit()
read.table("./rwd/st1.txt", sep = "")
st1<-read.table("./rwd/st1.txt", sep = "")
st1
head(st1)
head(st1, n = 1)
st1<-read.table("./rwd/st1.txt", sep = ",")
st`1
)
dkn
]
}
)
''
~`
st1
head(st1, 1)
head(st1, 2)
preet <- read.table("./rwd/cpro/tidy-data.txt", sep = "\t")
View(preet)
View(st1)
st2<-read.table("./rwd/st2.txt", sep = "")
st3<-read.table("./rwd/st3.txt", sep = "")
View(preet)
head(preet, n = 1)
preet[1,]
preet$1
preet$"1"
preet[1,]
class(preet[1,])
class(preet[1,])
preet[1,]
colnames(preet)
preet[1,]
View(res)
st4<-read.table("./rwd/st4.txt", sep = "")
swirl()
install.packages("kernlab")
library(kernlab)
rversion
rversion()
?version
R.Version()
?data
data(spam)
search()
str(spam)
str(spam, 1:4)
str(spam, c(1:4))
str(spam, [1:4]
str(spam, [1:4])
str(spam[1:5])
class(spam)
spam[1:5]
spam[1:5,]
spam[,1:5]
spam[1:5]
?rbinorm
rbinom
?rbinom
runif(1)
runif(5)
runif(1)
runif(5)
?runif
a = runif(500000, min = -2 , max = 2)
head(a)
summary(a)
hist(1)
hist(a)
data(spam)
str(spam[5])
head(spam, n = 2)
str(spam[,5])
str(spam[1:5])
set.seed(3435)
rbinom(4601, size = 1, prob = .5)
trainIndicator <- rbinom(4601, size = 1, prob = .5)
table(trainIndicator)
library(kernlab)
data(spam)
set.seed(3435)
trainIndicator <- rbinom(4601, size = 1, prob = .5)
table(trainIndicator)
trainSpam <- spam[trainIndicator == 1, ]
testSpam <- spam[trainIndicator == 0,]
names(trainSpam)
sum(trainSpam$make)
sum(trainSpam$address)
sum(trainSpam$internet)
head(trainSpam, n = 2)
table(trainSpam$type)
with(trainSpam. plot(type, capitalAve))
with(trainSpam, plot(type, capitalAve))
summary(trainSpam$capitalAve)
x <- c(10,5,15,20,25)
quatile(x, prob=.25)
quantile(x, prob=.25)
?quantile
x = rnorm(36, mean = 10, sd = 5)
y = ts(x, start = c(2010, 1), frquency = 12)
y = ts(x, start = c(2010, 1), frequency = 12)
class(y)
y
plot(y, type = "o", bty = "n")
c = rep(c(1,2,3), c(2,4,6))
c
samp = sample(1:12, 12, repeat = FLSE)
samp = sample(1:12, 12, repeat = FALSE)
?sample
samp = sample(1:12, 12, replace = FALSE)
csamp <- c[samp]
csamp
plot(csamp)
plot(csamp, type = "o")
plot(csamp, type = "o", bty = "n")
?plot
?AirPassengers
names(AirPassengers)
head(AirPassengers)
?dataset
search()
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
detach(package:datasets)
search()
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
search()
detach(package:"datasets")
detach(package:datasets)
search()
install.packages("datasets")
AirPassengers
search()
library(datasets)
AirPassengers
class(AirPassengers)
mtcars
names(mtcars)
barplot(mtcars$disp[1:10])
barplot(mtcars$disp[1:10], xlab = "cars")
barplot(mtcars$disp[1:10], xlab = "cars", ylab = "disp")
barplot(mtcars$disp[1:10], xlab = "cars", ylab = "disp", main = "disp plot")
barplot(mtcars$disp[1:10], space = 1, xlab = "cars", ylab = "disp", main = "disp plot")
barplot(mtcars$disp[1:10], space = .5, xlab = "cars", ylab = "disp", main = "disp plot")
barplot(mtcars$disp[1:10], space = .5,cex.names = .7, xlab = "cars", ylab = "disp", main = "disp plot")
barplot(mtcars$disp[1:10], space = .5,cex.names = .2, xlab = "cars", ylab = "disp", main = "disp plot")
barplot(mtcars$disp[1:10], space = .5,cex.names = 1, xlab = "cars", ylab = "disp", main = "disp plot")
barplot(mtcars$disp[1:10], space = .5,cex.names = .8, xlab = "cars", ylab = "disp", main = "disp plot")
barplot(mtcars$disp[1:10], space = .5,cex.names = .8, xlab = "cars", ylab = "disp", main = "disp plot",names.arg = rownames(mtcars))
barplot(mtcars$disp[1:10], space = .5,cex.names = .8, xlab = "cars", ylab = "disp", main = "disp plot",names.arg = rownames(mtcars)[10])
barplot(mtcars$disp[1:10], space = .5,cex.names = .8, xlab = "cars", ylab = "disp", main = "disp plot",names.arg = rownames(mtcars)[1:10])
barplot(mtcars$disp[1:10], space = .5,cex.names = .4, xlab = "cars", ylab = "disp", main = "disp plot",names.arg = rownames(mtcars)[1:10])
barplot(mtcars$disp[1:10], space = .5,cex.names = .6, xlab = "cars", ylab = "disp", main = "disp plot",names.arg = rownames(mtcars)[1:10])
barplot(mtcars$disp[1:10], space = .5,cex.names = .6, xlab = "cars", ylab = "disp", main = "disp plot",names.arg = rownames(mtcars)[1:10], col = rainbow(10,.5,.6))
barplot(mtcars$disp[1:10], space = .5,cex.names = .6, xlab = "cars", ylab = "disp", main = "disp plot",names.arg = rownames(mtcars)[1:10], col = rainbow(10,.6,.75))
barplot(mtcars$disp[1:10], space = .5,cex.names = .6, xlab = "cars", ylab = "disp", main = "disp plot",names.arg = rownames(mtcars)[1:10], col = rainbow(10,.6,.95))
barplot(mtcars$disp[1:10], space = .5,cex.names = .6, xlab = "cars", ylab = "disp", main = "disp plot",names.arg = rownames(mtcars)[1:10], col = rainbow(10,.4,.95))
barplot(mtcars$disp[1:10], space = .5,cex.names = .6, xlab = "cars", ylab = "disp", main = "disp plot",names.arg = rownames(mtcars)[1:10], col = rainbow(10,.9,.95))
seq(from = 3, by = 14, length = 12)
seq <- seq(from = 3, by = 14, length = 12)
seq
seq <- seq(from = 3, by = 4, length = 12)
seq
samp = sample(1:12, 12, replace = F)
seq <- seq[samp]
seq
dim(seq) <- c(3,4)
seq
row.names(seq) <- c("paul", "mary", "ryan")
col.names(seq) <- c("class 1", "class 2", "class 3", "class 2")
colnames(seq) <- c("class 1", "class 2", "class 3", "class 4")
sew
seq
?barplot
barplot(seq)
barplot(seq, col = rainbow(3,.5.5))
barplot(seq, col = rainbow(3,.5,.5))
barplot(seq, col = rainbow(3,.7,.7))
barplot(seq, legends.text, col = rainbow(3,.7,.7))
barplot(seq, legend.text = T, col = rainbow(3,.7,.7))
barplot(seq, legend.text = T, col = rainbow(3,.7,.7), cex.names = .4)
barplot(seq, legend.text = T, col = rainbow(3,.7,.7), cex.names = .7)
barplot(seq, legend.text = T, col = rainbow(3,.7,.7), cex.names = .7, beside = F)
barplot(seq, legend.text = T, col = rainbow(3,.7,.7), cex.names = .7, beside = T)
barplot(seq, legend.text = T, col = rainbow(3,.7,.7), cex.names = .7, beside = F)
barplot(seq, legend.text = T, col = rainbow(3,.7,.7), cex.names = .7, beside = T)
barplot(seq, legend.text = T, col = rainbow(3,.7,.7), cex.names = .7, beside = T, names.arg = rownames)
barplot(seq, legend.text = T, col = rainbow(3,.7,.7), cex.names = .7, beside = T, names.arg = rownames(seq))
barplot(seq, legend.text = T, col = rainbow(3,.7,.7), cex.names = .7, beside = T)
barplot(seq, legend.text = T, col = rainbow(3,.7,.7), cex.names = .7, beside = F, names.arg = rownames(seq))
barplot(seq, legend.text = T, col = rainbow(3,.7,.7), cex.names = .7, beside = F, names.arg = colnames(seq))
barplot(seq, legend.text = T, col = rainbow(3,.7,.7), cex.names = .7, beside = F, names.arg = c("a","b","c","d'")
)
path = "F:\Data Science\Coursera - Exploratory Data Analysis\04_ExploratoryAnalysis\exploratoryGraphs\data"
path = "F:/Data Science/Coursera - Exploratory Data Analysis/04_ExploratoryAnalysis/exploratoryGraphs\data"
path = "F:/Data Science/Coursera - Exploratory Data Analysis/04_ExploratoryAnalysis/exploratoryGraphs/data"
path = "F:/Data Science/Coursera - Exploratory Data Analysis/04_ExploratoryAnalysis/exploratoryGraphs/data/avgpm25.csv"
read.table(path, sep = ",", header = TRUE)
pm25read.table(path, sep = ",", header = TRUE)
pollution <- read.table(path, sep = ",", header = TRUE)
head(pollution, n = 2)
summary(pollution$pm25)
boxplot(pollution$pm25)
?boxplot
boxplot(pollution$pm25, range = 0)
boxplot(pollution$pm25, range = .5)
boxplot(pollution$pm25, range = 1)
boxplot(pollution$pm25)
path = "F:/Data Science/Coursera - Exploratory Data Analysis/04_ExploratoryAnalysis/exploratoryGraphs/data/LungCapData.csv"
path = "F:/Data Science/Coursera - Exploratory Data Analysis/04_ExploratoryAnalysis/exploratoryGraphs/data/LungCapData.xls"
library("xlsx", lib.loc="~/R/win-library/3.1")
read.xlsx(path)
read.xlsx(path, sheetIndex = 1)
LungCap <-read.xlsx(path, sheetIndex = 1)
head(LungCap)
boxplot(LungCap)
boxplot(LungCap$LungCap)
summary(LungCap$LungCap)
?boxploy
?boxplot
summary(LungCap$LungCap, main = "Plot of the Lung Capacity")
boxplot(LungCap$LungCap, main = "Plot of the Lung Capacity")
with(LungCap, boxplot(LungCap  ~ Gender))
subset(LungCap, Gender == male)[[LungCap]]
subset(LungCap, Gender == "male")[[LungCap]]
subset(LungCap, Gender == "male")
subset(LungCap, Gender == "male")[["LungCap"]]
boxplot(subset(LungCap, Gender == "male")[["LungCap"]])
boxplot(subset(LungCap, Gender == "male")[["LungCap"]], subset(LungCap, Gender == "female")[["LungCap"]])
hist(pollution$pm25, col= rainbow(10,.05.05))
hist(pollution$pm25, col= rainbow(10,.05,.05))
hist(pollution$pm25, col= rainbow(16,.05,.05))
hist(pollution$pm25, col= "green")
?abline
rug(pollution$[m25])
rug(pollution$pm25)
boxplot(pollution$pm25)
abline(h = 12)
abline(a = 12, b = 0)
abline(a = 12, b = 1)
hist(pollution$pm25, col = "green")
abline(v = 12)
abline(v = 12, lwd = 4)
abline(v = 12, lwd = 4, col = "magenta")
rung(pollution$pm25)
rug(pollution$pm25)
median(pollution$pm25)
boxplot(pollution$pm25)
summary(pollution$pm25)
rung(pollution$pm25)
hist(pollution$pm25, col = "green")
rug(pollution$pm25)
abline(v = median(pollution$pm25), col = "magenta"
)
abline(v = median(pollution$pm25), col = "magenta", lwd = 4)
abline(a = 12, b = "infinity", col = "red", lwd = 4)
abline(a = 12, b = 99999999, col = "red", lwd = 4)
abline(a = 12, b = 99, col = "red", lwd = 4)
abline(a = 1, b = 99, col = "red", lwd = 4)
abline(a = 0, b = 9, col = "red", lwd = 4)
abline(a = 12, b = 9, col = "red", lwd = 4)
abline(v = 12, col = "red", lwd = 4)
class(pollution$region)
barplot(pollution$region)
table(pollution$region)
class(table(pollution$region))
unclass(table(pollution$region))
class(unclass(table(pollution$region)))
nrow(class(unclass(table(pollution$region))))
ncol(class(unclass(table(pollution$region))))
ncol(unclass(table(pollution$region)))
unclass(table(pollution$region))
q <- unclass(table(pollution$region))
nrow(q)
ncol(q)
barplot(unclass(table(pollution$region)))
with(pollution, boxplot(pm25 ~ region)
)
with(pollution, boxplot(pm25 ~ region, range = 0)
)
with(pollution, boxplot(pm25 ~ region, range = 0, col = "red")
)
plot(pollution$pm25)
length(pollution$pm25)
with(pollution, plot(pm25))]
with(pollution, plot(pm25))
with(pollution, plot(latitude, pm25, col = region)
)
abline(v = 12, lwd = 2, lty = 2)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1,2), mar = c(5,4,2,1))
with(subset(pollution, region == "west"), plot(latitude, pm25, main = "West"))
with(subset(pollution, region == "east"), plot(latitude, pm25, main = "east"))
cars
with(cars, plot(speed,distance))
with(cars, plot(speed,dist))
par(mfrow = c(1,1))
with(cars, plot(speed,dist))
setwd("F:/Data Science/Coursera - Reproducible Research/RepData_PeerAssessment1")
unzip("activity.zip", "activity.csv")
actDf <- read.table("activity.csv", sep = ",", header = TRUE)
library(dplyr)
raw_tblDf <- tbl_df(actDf)
tblDf <- filter(raw_tblDf, !is.na(steps))
byDate <- group_by(tblDf, date)
totalSteps_day <- summarize(byDate, sum(steps))
colnames(totalSteps_day) <- c("date", "sumSteps")
hist(totalSteps_day$sumSteps, main="Number of Steps",
xlab="Total number of steps taken each day", col="light blue")
mean(totalSteps_day$sumSteps)
median(totalSteps_day$sumSteps)
byInterval <- group_by(tblDf, interval)
meanStep_Interval <- summarize(byInterval, mean(steps))
colnames(meanStep_Interval) <- c("interval", "steps")
plot(meanStep_Interval$interval, meanStep_Interval$steps, type="l",
col="blue",
xlab="5-minute interval",
ylab="Average number of steps taken",
main="Average daily activity pattern")
filter(meanStep_Interval, steps == max(steps))$interval
sum(is.na(raw_tblDf$steps))
temp_raw_tblDf <- cbind(raw_tblDf, meanStep_Interval$steps)
colnames(temp_raw_tblDf) <- c("steps", "date", "interval", "avgSteps")
filled_tblDf <- raw_tblDf
for(i in 1:nrow(filled_tblDf))    {
if(is.na(filled_tblDf$steps[i]))
filled_tblDf$steps[i] <- temp_raw_tblDf$avgSteps[i]
}
byDate1 <- group_by(filled_tblDf, date)
totalSteps_day1 <- summarize(byDate1, sum(steps))
colnames(totalSteps_day1) <- c("date", "sumSteps")
hist(totalSteps_day1$sumSteps, main="Number of Steps (filled values)",
xlab="Total number of steps taken each day", col="light blue")
mean(totalSteps_day1$sumSteps)
median(totalSteps_day1$sumSteps)
library(lattice)
allDays <- weekdays(as.Date(filled_tblDf$date))
data_with_days <- transform(filled_tblDf, day = allDays)
data_with_days$wk <- ifelse(data_with_days$day %in% c("Saturday", "Sunday"),"weekend", "weekday")
library(plyr)
average_by_interval_wk <- ddply(data_with_days, .(interval, wk), summarise, steps=mean(steps))
xyplot(steps ~ interval | wk, data = average_by_interval_wk, layout = c(1, 2), type="l")
?knit2html
getwd)()
getwd()
knit2html()
library(knitr)
knit2html()
knitr2html(PA1_template.Rmd)
library(knitr)
